#import "./template.typ": report, code-info
#show: report.with(
  title: [
    Webプログラミング及び演習 \
    #text(size: 25pt)[単語クイズを自動生成して楽しみながら覚えるWebアプリケーションの考案] \
  ],
  author: [
    情報科学部 情報科学科 コンピュータシステム専攻 \
    K22120 牧野遥斗
  ]
)
#set text(font: "Hiragino Mincho ProN")


//--------------------
//       目次
//--------------------
#show outline.entry.where(
  level: 1
): it => {
  v(14pt, weak: true)
  strong(it)
}

#outline(
    title: "目次",
    depth: 3,
    indent: 2em
)

#pagebreak()


= 目標

このアプリケーションは、日々の授業や資格取得に必要な単語を楽しく効率的に覚えるためのWebアプリケーションである。
言語学習において多くの単語を覚えることは不可欠だが、従来の単語帳を使った暗記法では、時間がかかるうえに退屈さを感じる。
そこで、このアプリはゲーム性を持たせたクイズ形式を導入し、学習の楽しさを高め、単語暗記の効率を向上させる。

= 目的
このアプリケーションの目的は、単語暗記の効率化と学習の楽しさの両立である。
その実現のため、以下の工夫を取り入れた。

+ クイズ形式で単語を覚える仕組み: 単語暗記に楽しさを加え、学習へのモチベーションを高める
+ クイズの自動生成機能: Word2Vecを活用し、ユーザーが単語の意味を入力するだけで、それに関連する単語を基にクイズを自動生成する。この機能により、クイズ作成の手間を大幅に削減した。
さらに、単語登録やクイズプレイの基本機能に加え、エラー処理を充実させ、ユーザー体験（UX）の向上にも取り組んだ。
現時点では中核機能が完成しており、ユーザーが満足するアプリケーションを提供できているが、さらなる改善点については次節で述べます。

= 機能
このアプリケーションは、単語クイズを自動生成して楽しみながら覚えることができる。
そのため、単語を登録する編集画面と、単語をクイズするクイズ画面がある。
編集画面では、単語とその意味を登録することができる。
クイズ画面では、単語クイズを自動生成して楽しみながら覚えることができる。
各画面の詳細は、@image:アプリ画面 と @image:クイズ画面 に示す。

#figure(image("./images/アプリホーム画面.png"),
  caption: [
    アプリ画面
  ]
)<image:アプリ画面>

#figure(image("./images/クイズ画面.png"),
  caption: [
    クイズ画面
  ]
)<image:クイズ画面>

== 編集画面

編集画面では、単語とその意味を登録することができる。
単語とその意味を登録すると、クイズの自動生成ができるかどうかを判定する。

クイズの自動生成ができる単語は、今回APIで使用したWord2Vecの単語ベクトルに含まれている単語である。
Word2Vecとは、文章中の単語を数値ベクトルに変換してその意味を把握する自然言語処理の手法である。
数値ベクトルに変換を行っているため、演算処理をすることが可能で、cos類似度を用いることで単語の近侍度を求めることができる。
今回使用したWord2Vecのサンプルデータは日本語Wikipediaのサイトを用いているため、日本語以外の単語は対応していない場合が多い。
対応していない単語を用いると自動でクイズを生成することができないため、対応していない単語を登録されないようにエラー処理を行う。
クイズの自動生成ができない単語のエラー画面は @image:生成に使えない文字のエラー に示す。
エラーを表示することにより、クイズの自動生成ができない単語を登録することを防ぎ、クイズの自動生成ができる単語のみを登録することができる。

#figure(image("./images/生成に使えない文字のエラー.png"),
  caption: [
    生成に使えない文字のエラー画面
  ]
)<image:生成に使えない文字のエラー>

覚えたい単語を登録したら、クイズ画面に移動することができる。
ボトムナビゲーションにある「Quiz」を押し、クイズ画面に移動する。

== クイズ画面

クイズ画面では、単語クイズを自動生成して楽しみながら覚えることができる。
クイズは3択クイズで、単語の意味を選択することができる。
クイズの自動生成は、Word2Vecの単語ベクトルを用いて行う。
正解の単語の意味に近い単語を50件取得し、その単語の中から二種類選択肢として表示する。
クイズの選択画面は図 @image:クイズのボタン に示す。

クイズは、回答をすると正誤に合わせた効果音を流すようにし、ユーザーエクスペリエンスを高めるように設計を行なった。
最後のクイズが終ると、クイズが終了したことをアナウンスする。
クイズの終了画面は @image:クイズ終了時 に示す。

#figure(image("./images/クイズのボタン.png"),
  caption: [
    クイズの選択ボタン
  ]
)<image:クイズのボタン>

#figure(image("./images/クイズ終了時.png"),
  caption: [
    クイズ終了時の画面
  ]
)<image:クイズ終了時>

= データ構造について

@image:ER図 は、WordListテーブルとQuizResultテーブルの関係を示す。WordListテーブルとQuizResultテーブルは、これらのデータ構造がどのように設計され、相互に関連付けられているかを視覚的に表している。

#figure(image("./images/ER図.png"),
  caption: [
    ER図
  ]
)<image:ER図>

@image:ER図 に示す通り、WordListテーブルとQuizResultテーブルは明確に分離されており、それぞれ異なるデータの役割を果たしている。この設計により、単語リストの管理とクイズの結果記録を効率的に行うことができる。以下のように、WordListテーブルとQuizResultテーブルのマイグレーションファイルとモデルファイルを作成し、データベースの設計を行った。

== WordList テーブル

主キー (id) を持ち、単語リストの基本情報 (単語の表記とその意味) を管理する。
各レコードには、単語（write）とその意味（read）が格納される。
時間情報は timestamps (作成日時と更新日時) に含まれる。

== QuizResult テーブル

正解数 (correctAnswers)、問題数 (totalQuestions)、およびクイズ結果の記録日時 (timestamp) を保持する。
クイズに関する統計データを保存するための役割を果たす。

== リレーション

両テーブル間に直接的なリレーションは存在しないが、論理的な関係としてクイズに出題される単語リスト（WordList）とその結果（QuizResult）が独立した形で機能するよう設計されている。
このデータ構造の設計により、単語管理とクイズ結果の記録がスムーズかつ効率的に行えるデータベースを構築することができる。

= 改善点・反省点

今後の改善点として、以下のようなものがある。
様々な単語を登録することで、様々なジャンルの単語が乱立してしまい覚えたい単語以外の単語もクイズに出てきてしまう問題点がある。
この問題点を解決するために、単語を登録する際に、単語のジャンルを登録することができるようにする。
単語のジャンルを登録することで、単語のジャンルを指定してクイズを出題することができる。

次に、Word2Vecの単語ベクトルを用いてクイズを自動生成しているため、単語ベクトルにない言葉はクイズに出題できない。
今回はWikipediaの記事をサンプルとして使用しているため、日本語以外の言語は単語ベクトルにあまり含まれていない。
この問題点を解決するために、英語版のWikipediaをサンプルとして使用することで、単語ベクトルに含まれていない単語もクイズに出題することができる。
また、中国語やフランス語にも対応させるため、世界各国のサンプルデータを取得することで、単語ベクトルに含まれていない単語もクイズに出題することができる。


= 付録

== API通信部分
今回Word2Vecと通信を行うために、axiosを用いてAPI通信を行なった。
axiosを用いるメリットとして、使いやすく軽量である点、自動的なJSONデータ変換を行う点、
Promise APIにサポートしている点などがあるため本プログラムに採用した。
axiosを使用しているコードは @image:axios に示す。

#figure(image("./images/axios.png"),
  caption: [
    axiosを使用してAPIを通信するコード
  ]
)<image:axios>


== デプロイについて

今回のシステムは、CloudflarePagesを用いてデプロイを行なった。
CloudflarePagesを用いるメリットとして、無料で簡単にデプロイを行うことができる点、
GitHubのリポジトリにあるソースコードをそのままデプロイすることができる点などがあるため本プログラムに採用した。

下記URLからアクセスできる。
https://my-wordlist-app.pages.dev/

== faviconについて

faviconは、ブラウザのタブに表示されるアイコンである。
今回は、faviconを作成するために、Figmaを使用した。
Figmaを使用するメリットとして、簡単にアイコンを作成することができる点、
アイコンを作成する際に、デザインを統一することができる点などがあるため本プログラムに採用した。

#figure(
  image(
    "./images/favicon.png",
    width: 40%
  ),
  caption: [
    faviconの作成
  ]
)<image:favicon>

